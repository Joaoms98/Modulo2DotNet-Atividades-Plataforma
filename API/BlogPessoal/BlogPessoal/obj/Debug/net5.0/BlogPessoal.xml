<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogPessoal</name>
    </assembly>
    <members>
        <member name="M:BlogPessoal.src.controladores.AuthenticationController.AuthenticationAsync(BlogPessoal.src.dtos.AuthenticationDTO)">
             <summary>
             Pegar Autorização
             </summary>
             <param name="authentication">AuthenticationDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Autenticacao
                 {
                    "email": "joao@domain.com",
                    "password": "134652"
                 }
            
             </remarks>
             <response code="201">Retorna usuario criado</response>
             <response code="400">Erro na requisição</response>
             <response code="401">E-mail ou senha invalido</response>
        </member>
        <member name="M:BlogPessoal.src.controller.PostController.GetPostByIdAsync(System.Int32)">
            <summary>
            Pegar o post pelo id
            </summary>
            <param name="idPost">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o tema</response>
            <response code="404">Tema não existente</response>
        </member>
        <member name="M:BlogPessoal.src.controller.PostController.GetAllByPostsAsync">
            <summary>
            Pegar todos os posts
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Retorna todos os posts</response>
            <response code="204">nenhum post criado</response>
        </member>
        <member name="M:BlogPessoal.src.controller.PostController.GetPostsbySearchAsync(System.String,System.String,System.String)">
            <summary>
            Pegar o post pelo id
            </summary>
            <param name="title"></param>
            <param name="descriptiontheme"></param>
            <param name="namecriator"></param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o Post</response>
            <response code="404">Post não existente</response>
        </member>
        <member name="M:BlogPessoal.src.controller.PostController.AddPostAsync(BlogPessoal.src.dtos.AddPostDTO)">
             <summary>
             Criar novo Post
             </summary>
             <param name="post">AddPostDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Posts
                 {
                    "Title": "My new cute loli",
                    "Description":"I bought my first cute loli",
                    "Photograph":"sdsdsdsdsdssd",
                    "creator":"victor@gmail.com",
                    "theme":"loli"
                 }
            
             </remarks>
             <response code="201">Retorna post criado</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoal.src.controller.PostController.UpdatePostAsync(BlogPessoal.src.dtos.UpdatePostDTO)">
             <summary>
             Atualizar um post
             </summary>
             <param name="post">UpdatePostDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 PUT /api/Posts
                 {
                 "id": 1,
                 "title": "My new post",
                 "description":"About furrys",
                 "Photograph":"sdsdsdsds",
                 "theme":"furry"
                 }
            
             </remarks>
             <response code="201">Retorna post atualizado</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoal.src.controller.PostController.DeletePostAsync(System.Int32)">
            <summary>
            Deletar post pelo Id
            </summary>
            <param name="idPost">int</param>
            <returns>ActionResult</returns>
            <response code="204">Usuario deletado</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Themecontroller.AddThemeAsync(BlogPessoal.src.dtos.AddThemeDTO)">
             <summary>
             Criar novo tema
             </summary>
             <param name="theme">AddThemeDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Themes
                 {
                   	"description": "Loli
                 }
            
             </remarks>
             <response code="200">Retorna Theme criado</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Themecontroller.DeleteUserAsync(System.Int32)">
            <summary>
            Deletar tema pelo Id
            </summary>
            <param name="idtheme">int</param>
            <returns>ActionResult</returns>
            <response code="204">Usuario deletado</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Themecontroller.GetThemeByIdAsync(System.Int32)">
            <summary>
            Pegar o tema pelo id
            </summary>
            <param name="idtheme">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o tema</response>
            <response code="404">Tema não existente</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Themecontroller.GetThemeByDescriptionAsync(System.String)">
            <summary>
            Pegar o tema pela descrição
            </summary>
            <param name="description">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o tema</response>
            <response code="404">Tema não existente</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Themecontroller.UpdateThemeAsync(BlogPessoal.src.dtos.UpdateThemeDTO)">
             <summary>
             Atualizar tema
             </summary>
             <param name="theme">UpdateThemeDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 PUT /api/Themes
                 { 
                     "id": 1,
                   	"description": "Loli
                 }
            
             </remarks>
             <response code="200">Retorna Theme atualizado</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Usercontroller.GetUserByIdAsync(System.Int32)">
            <summary>
            Pegar usuario pelo Id
            </summary>
            <param name="idUser">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o usuario</response>
            <response code="404">Usuario não existente</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Usercontroller.GetUserByNameAsync(System.String)">
            <summary>
            Pegar usuario pelo nome
            </summary>
            <param name="UserName">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o usuario</response>
            <response code="404">Usuario não existente</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Usercontroller.GetUserByEmailAsync(System.String)">
            <summary>
            Pegar usuario pelo email
            </summary>
            <param name="emailUser">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o usuario</response>
            <response code="404">Usuario não existente</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Usercontroller.AddUserAsync(BlogPessoal.src.dtos.AddUserDTO)">
             <summary>
             Criar novo Usuario
             </summary>
             <param name="user">AddUserDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Users
                 {
                    "nome": "Joao",
                    "email": "Joao@domain.com",
                    "senha": "134652",
                    "foto": "URLFOTO",
                    "tipo": "NORMAL"
                 }
            
             </remarks>
             <response code="201">Retorna usuario criado</response>
             <response code="400">Erro na requisição</response>
             <response code="401">E-mail ja cadastrado</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Usercontroller.UpdateUserAsync(BlogPessoal.src.dtos.UpdateUserDTO)">
             <summary>
             Atualizar Usuario
             </summary>
             <param name="user">UpdateUserDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 PUT /api/Users
                 {
                    "id": 1,    
                    "nome": "Joao2",
                    "senha": "134652",
                    "foto": "URLFOTO"
                 }
            
             </remarks>
             <response code="200">Retorna usuario atualizado</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoal.src.controller.Usercontroller.DeleteUserAsync(System.Int32)">
            <summary>
            Deletar usuario pelo Id
            </summary>
            <param name="iduser">int</param>
            <returns>ActionResult</returns>
            <response code="204">Usuario deletado</response>
        </member>
        <member name="T:BlogPessoal.src.data.AppBlogContext">
            <summary>
            <para>Resumo: Classe contexto, responsavel por carregar contexto e definir DbSets</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.AuthenticationDTO">
            <summary>
            <para>Resumo:Classe espelho para criar um token</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.AuthorizationDTO">
            <summary>
            <para>Resumo:Classe espelho para autorização</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.AddPostDTO">
            <summary>
            <para>Resumo:Classe espelho para criar um novo Posts</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.UpdatePostDTO">
            <summary>
            <para>Resumo:Classe espelho para alterar um novo Posts</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.AddThemeDTO">
            <summary>
            <para>Resumo:Classe espelho para criar um novo tema</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.UpdateThemeDTO">
            <summary>
            <para>Resumo:Classe espelho para alterar um novo Tema</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.AddUserDTO">
            <summary>
            <para>Resumo:Classe espelho para criar um novo usuário</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.dtos.UpdateUserDTO">
            <summary>
            <para>Resumo:Classe espelho para alterar um novo usuário</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.models.PostModel">
            <summary>
            <para>Resumo: Classe responsavel por representar tb_posts no banco.</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.models.ThemeModel">
            <summary>
            <para>Resumo: Classe responsavel por representar tb_Themes no banco.</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.models.UserModel">
            <summary>
            <para>Resumo: Classe responsavel por representar tb_usuarios no banco.</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.repositors.implements.AuthenticationServices">
            <summary>
            <para>Resumo: Classe responsavel por implementar IAuthentication</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.AuthenticationServices.CreateUserWithoutDuplicateAsync(BlogPessoal.src.dtos.AddUserDTO)">
            <summary>
            <para>Resumo: Método assíncrono para não duplicar um usuário</para>
            </summary>
            <param name="dto">AddUserDTO</param>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.AuthenticationServices.EncodePassword(System.String)">
            <summary>
            <para>Resumo: Método assíncrono para codificar a senha</para>
            </summary>
            <param name="password">AddUserDTO</param>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.AuthenticationServices.GenerateToken(BlogPessoal.src.models.UserModel)">
            <summary>
            <para>Resumo: Método assíncrono para gerar o token de usuário</para>
            </summary>
            <param name="user">AddUserDTO</param>
            <return>Token</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.AuthenticationServices.GetAuthorizationAsync(BlogPessoal.src.dtos.AuthenticationDTO)">
            <summary>
            <para>Resumo: Método assíncrono para autoriar o usuário</para>
            </summary>
            <param name="authentication">AddUserDTO</param>
        </member>
        <member name="T:BlogPessoal.src.repositors.implements.PostRepository">
            <summary>
            <para>Resumo: Classe responsavel por implementar IPost</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.PostRepository.AddPostAsync(BlogPessoal.src.dtos.AddPostDTO)">
            <summary>
            <para>Resumo: Método assíncrono para salvar um novo post</para>
            </summary>
            <param name="Post">AddUserDTO</param>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.PostRepository.DeletePostAsync(System.Int32)">
            <summary>
            <para>Resumo: Método assíncrono para deletar um post</para>
            </summary>
            <param name="id"></param>
            <return>PostModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.PostRepository.GetAllByPostsAsync">
            <summary>
            <para>Resumo: Método assíncrono para pegar um post pelo Id</para>
            </summary>
            <return>PostModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.PostRepository.GetPostByIdAsync(System.Int32)">
            <summary>
            <para>Resumo: Método assíncrono para pegar um post pelo Id</para>
            </summary>
            <param name="id">Id do usuario</param>
            <return>PostModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.PostRepository.GetPostsbySearchAsync(System.String,System.String,System.String)">
            <summary>
            <para>Resumo: Método assíncrono para pegar um post pela pesquisa</para>
            </summary>
            <param name="title">Dados do post</param>
            <param name="theme"></param>
            <param name="creator"></param>
            <return>PostModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.PostRepository.UpdatePostAsync(BlogPessoal.src.dtos.UpdatePostDTO)">
            <summary>
            <para>Resumo: Método assíncrono para atualizar um post</para>
            </summary>
            <param name="Post">UpdatePostDTO</param>
        </member>
        <member name="T:BlogPessoal.src.repositors.implements.ThemeRepository">
            <summary>
            <para>Resumo: Classe responsavel por implementar ITheme</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.ThemeRepository.AddThemeAsync(BlogPessoal.src.dtos.AddThemeDTO)">
            <summary>
            <para>Resumo: Método assíncrono para salvar um novo Tema</para>
            </summary>
            <param name="theme">AddThemeDTO</param>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.ThemeRepository.DeleteThemeAsync(System.Int32)">
            <summary>
            <para>Resumo: Método assíncrono para deletar um tema</para>
            </summary>
            <param name="id">Id do usuario</param>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.ThemeRepository.GetThemeByDescriptionAsync(System.String)">
            <summary>
            <para>Resumo: Método assíncrono para pegar um tema pela descrição</para>
            </summary>
            <param name="description">Descrição do tema</param>
            <return>ThemeModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.ThemeRepository.GetThemeByIdAsync(System.Int32)">
            <summary>
            <para>Resumo: Método assíncrono para pegar um tema pelo id</para>
            </summary>
            <param name="id">Id do tema</param>
            <return>ThemeModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.ThemeRepository.UpdateThemeAsync(BlogPessoal.src.dtos.UpdateThemeDTO)">
            <summary>
            <para>Resumo: Método assíncrono para atualizar um tema</para>
            </summary>
            <param name="theme">UpdateThemeDTO</param>
        </member>
        <member name="T:BlogPessoal.src.repositors.implements.UserRepository">
            <summary>
            <para>Resumo: Classe responsavel por implementar IUsuario</para>
            <para>Criado por: Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 13/05/2022</para>
            </summary>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.UserRepository.AddUserAsync(BlogPessoal.src.dtos.AddUserDTO)">
            <summary>
            <para>Resumo: Método assíncrono para salvar um novo usuario</para>
            </summary>
            <param name="User">AddUserDTO</param>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.UserRepository.DeleteUserAsync(System.Int32)">
            <summary>
            <para>Resumo: Método assíncrono para deletar um usuario</para>
            </summary>
            <param name="id">Id do usuario</param>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.UserRepository.GetUserByEmailAsync(System.String)">
            <summary>
            <para>Resumo: Método assíncrono para pegar um usuario pelo email</para>
            </summary>
            <param name="Email">Email do usuario</param>
            <return>UserModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.UserRepository.GetUserByIdAsync(System.Int32)">
            <summary>
            <para>Resumo: Método assíncrono para pegar um usuario pelo Id</para>
            </summary>
            <param name="id">Id do usuario</param>
            <return>UserModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.UserRepository.GetUserByNameAsync(System.String)">
            <summary>
            <para>Resumo: Método assíncrono para pegar usuarios pelo nome</para>
            </summary>
            <param name="Name">Nome do usuario</param>
            <return>Lista UserModel</return>
        </member>
        <member name="M:BlogPessoal.src.repositors.implements.UserRepository.UpdateUserAsync(BlogPessoal.src.dtos.UpdateUserDTO)">
            <summary>
            <para>Resumo: Método assíncrono para atualizar um usuario</para>
            </summary>
            <param name="User">UpdateUserDTO</param>
        </member>
        <member name="T:BlogPessoal.src.repositors.IPost">
            <summary>
            <para>Resumo: Responsavel por representar ações de CRUD de Posts</para>
            <para>Criado por:Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.repositors.ITheme">
            <summary>
            <para>Resumo: Responsavel por representar ações de CRUD de Tema</para>
            <para>Criado por:Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoal.src.repositors.IUser">
            <summary>
            <para>Resumo: Responsavel por representar ações de CRUD de usuario</para>
            <para>Criado por:Joaoms98</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
    </members>
</doc>
